package euler

import scala.collection.mutable._
import scala.math._
import util.Prime
import java.io._

// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal
// and D = |Pk − Pj| is minimised; what is the value of D?
object Problem44 {
  def isPentagonal(num: Long) = {
    val root = (1 + sqrt(24 * num + 1)) / 6
    floor(root) == root
  }
  
  def pentagon(num: Long): Long = {
    num * (3 * num - 1) / 2
  }

  def isMatch(i: Long, j: Long): Boolean = {
    val p1 = pentagon(i)
    val p2 = pentagon(j)
    //println(i, j, p1, p2)
    if (isPentagonal(p1 + p2) && isPentagonal(p2 - p1)) {
      println(i, j, "match")
      true
    } else {
      false
    }
  }

  def findMatches(limit: Int) = {
    for (diff <- 1 to limit; i <- 1 to limit; if isMatch(i, (i+diff))) yield pentagon(i+diff) - pentagon(i)
  }
  
  
  def main(args: Array[String]) = {
    //println(isPentagonal(12))
    val matches = findMatches(100000).sorted
    println(matches)

    println("Problem 44: " + matches(0))
  }
}
